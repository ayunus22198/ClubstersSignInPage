{"version":3,"sources":["logo.svg","components/Forum.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","styles","fontFamily","textAlign","Forum","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onOpenModal","setState","open","onCloseModal","state","username","password","guest","userDisplay","guestDisplay","userID","e","preventDefault","console","log","axios","post","then","response","_this2","data","_id","concat","window","location","hash","replace","name","_this3","react_default","a","createElement","style","marginTop","justifyContent","alignItems","className","type","placeholder","onChange","target","value","onClick","onSubmit","bind","_this4","_this5","id","openModal","index_es","onClose","backgroundColor","center","dist","onPress","_renderFormUser","_renderFormGuest","React","Component","Boolean","hostname","match","ReactDOM","render","react_router_dom","react_router","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.57780208.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Modal from 'react-responsive-modal';\r\nimport { AwesomeButton } from \"react-awesome-button\";\r\nimport \"react-awesome-button/dist/styles.css\";\r\nimport axios from 'axios';\r\n\r\nconst styles = {\r\n  fontFamily: \"sans-serif\",\r\n  textAlign: \"center\"\r\n};\r\n\r\nexport default class Forum extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      open: false,\r\n      username: null,\r\n      password: null,\r\n      guest: null,\r\n      userDisplay: true,\r\n      guestDisplay: false,\r\n      userID: null\r\n    };\r\n  }\r\n\r\n  onOpenModal = () => {\r\n    this.setState({ open: true });\r\n  };\r\n\r\n  onCloseModal = () => {\r\n    this.setState({ open: false });\r\n  };\r\n\r\n  async onSubmit(e) {\r\n    e.preventDefault();\r\n    console.log(this.state.username, this.state.password);\r\n    const { username, password } = this.state;\r\n    if(username && password) {\r\n      await axios.post('https://clubster-backend.herokuapp.com/api/login', { username, password }).then((response) => {\r\n        this.setState({ userID: response.data._id});\r\n        console.log(this.state.userID);\r\n      });\r\n      await axios.post(`https://clubster-backend.herokuapp.com/api/events${window.location.hash.replace(\"#\",\"\")}/${this.state.userID}`, { userID: this.state.userID } );\r\n    } else {\r\n      await axios.post(`https://clubster-backend.herokuapp.com/api/events${window.location.hash.replace(\"#\",\"\")}/null`, { name: this.state.guest } );\r\n    }\r\n    //add user to went array\r\n  }\r\n\r\n  _renderFormUser() {\r\n     return (\r\n       <form style = {{marginTop:20, textAlign: 'center', justifyContent: 'center', alignItems: 'center'}}>\r\n        <p>\r\n         <span className=\"input\">\r\n           <input type=\"text\" placeholder=\"Username\" onChange={ (e) => this.setState({ username: e.target.value }) } />\r\n           <span></span>\r\n         </span>\r\n        </p>\r\n        <p>\r\n        \t<span className=\"input\">\r\n        \t\t<input type=\"text\" placeholder=\"Password\" onChange={ (e) => this.setState({ password: e.target.value }) } />\r\n        \t\t<span></span>\r\n        \t</span>\r\n        </p>\r\n         <button type='button' onClick= {this.onSubmit.bind(this)}>Submit</button>\r\n       </form>\r\n     )\r\n  }\r\n\r\n  _renderFormGuest() {\r\n     return (\r\n       <form style = {{marginTop:20, textAlign: 'center', justifyContent: 'center', alignItems: 'center'}}>\r\n        <p>\r\n         <span className=\"input\">\r\n           <input type=\"text\" placeholder=\"Enter your name\" onChange={ (e) => this.setState({ guest: e.target.value }) } />\r\n           <span></span>\r\n         </span>\r\n        </p>\r\n         <button type='button' onClick= {this.onSubmit.bind(this)}>Submit</button>\r\n       </form>\r\n     )\r\n  }\r\n\r\n  render() {\r\n    const { open } = this.state;\r\n    return (\r\n      <div id= \"App\">\r\n        <button onClick={this.openModal}>Open Modal</button>\r\n        <div style={styles}>\r\n          <h2>react-responsive-modal</h2>\r\n          <button onClick={this.onOpenModal}>Open modal</button>\r\n          <Modal open={true} onClose={this.onCloseModal} styles = {{backgroundColor: 'blue'}}center>\r\n            <h2> Sign into the event! </h2>\r\n            <AwesomeButton type=\"primary\" onPress = {() => this.setState({userDisplay:true,guestDisplay:false})}>Sign in as User</AwesomeButton>&nbsp;\r\n            <AwesomeButton type=\"primary\" onPress = {() => this.setState({userDisplay:false,guestDisplay:true})}>Sign in as Guest</AwesomeButton>\r\n            {(this.state.userDisplay) ? this._renderFormUser() : this._renderFormGuest() }\r\n          </Modal>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { HashRouter, Route } from \"react-router-dom\";\nimport Forum from './components/Forum';\nconst NewRoute = () => {\n  return (\n    <div>\n      <p>Hi!!!</p>\n    </div>\n  )\n}\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n\n    }\n  }\n\n  componentWillMount() {\n    console.log(window.location.pathname);\n  }\n\n  render() {\n    return (\n      <HashRouter>\n        <Route path = \"/:id/\" component={Forum} />\n      </HashRouter>\n    );\n  }\n\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter, Route } from \"react-router-dom\";\nimport Forum from './components/Forum';\n\nReactDOM.render(\n  <HashRouter>\n    <Route path = \"/:id/\" component={Forum} />\n  </HashRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}